version: "3.9"

services:
  tokenizer:
    build:
      context: ./vault
      dockerfile: Dockerfile
    ports:
      - "${VAULT_PORT}:${VAULT_PORT}"
    environment:
      - PORT=${VAULT_PORT}
      - NODE_ENV=${NODE_ENV}
    env_file:
      - .env
    depends_on:
      - redis
      - elasticsearch
      - kibana
      - access-service

  access-service:
    build:
      context: ./AccessService
    ports:
      - "${ACCESS_SERVICE_PORT}:${ACCESS_SERVICE_PORT}"
    environment:
      - PORT=${ACCESS_SERVICE_PORT}
      - NODE_ENV=${NODE_ENV}
      - CONSENT_SERVICE_URL=${CONSENT_SERVICE_URL}
      - POLICY_SERVICE_URL=${POLICY_SERVICE_URL}
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - policy-service
      - consent-service

  anomaly-service:
    build:
      context: ./AnomalyService
    ports:
      - "${ANOMALY_SERVICE_PORT}:${ANOMALY_SERVICE_PORT}"
    environment:
      - PORT=${ANOMALY_SERVICE_PORT}
      - DATABASE_URL=${DATABASE_URL}
      - ELASTIC_URL=${ELASTIC_URL}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - NODE_ENV=${NODE_ENV}
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  consent-service:
    build:
      context: ./ConsentService
    ports:
      - "${CONSENT_SERVICE_PORT}:${CONSENT_SERVICE_PORT}"
    environment:
      - PORT=${CONSENT_SERVICE_PORT}
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=${NODE_ENV}
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  policy-service:
    image: openpolicyagent/opa:latest
    volumes:
      - ./PolicyEngine:/policy
    command: "run --server --set=decision_logs.console=true /policy/data-access.rego"
    ports:
      - "${POLICY_SERVICE_PORT}:8181"
    env_file:
      - .env
    restart: unless-stopped

  redis:
    image: redis:7
    ports:
      - "${REDIS_PORT}:6379"
    command: ["redis-server", "--notify-keyspace-events", "Ex"]
    env_file:
      - .env

  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    env_file:
      - .env
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 40s

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.2
    ports:
      - "${KIBANA_PORT}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTIC_URL}
    env_file:
      - .env
    depends_on:
      elasticsearch:
        condition: service_healthy

volumes:
  esdata:
  pgdata:
